<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bot de Sorteio para Loco</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css">
  <style>
    .winner-card {
      background-color: #d4edda;
      border-color: #c3e6cb;
    }
    .status-badge {
      font-size: 1rem;
    }
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
    }
  </style>
</head>
<body>
  <div class="container mt-4">
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            <h1 class="fs-4 mb-0">Bot de Sorteio para Loco</h1>
          </div>
          <div class="card-body">
            <div class="alert alert-info" role="alert">
              <strong>Status do Bot:</strong>
              <% if (isActive) { %>
                <span class="badge bg-success status-badge ms-2">Ativo</span>
              <% } else { %>
                <span class="badge bg-danger status-badge ms-2">Inativo</span>
              <% } %>
            </div>

            <div class="row mb-4">
              <div class="col-md-6">
                <div class="d-grid gap-2">
                  <button id="startButton" class="btn btn-success" <%= isActive ? 'disabled' : '' %>>
                    <i class="bi bi-play-fill"></i> Iniciar Bot
                  </button>
                </div>
              </div>
              <div class="col-md-6">
                <div class="d-grid gap-2">
                  <button id="stopButton" class="btn btn-danger" <%= !isActive ? 'disabled' : '' %>>
                    <i class="bi bi-stop-fill"></i> Parar Bot
                  </button>
                </div>
              </div>
            </div>

            <div class="row mb-4">
              <div class="col-md-12">
                <div class="card">
                  <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Participantes (<span id="participantCount"><%= participantCount %></span>)</h5>
                    <div>
                      <button id="drawButton" class="btn btn-primary btn-sm" <%= participantCount === 0 ? 'disabled' : '' %>>
                        <i class="bi bi-award"></i> Sortear
                      </button>
                      <button id="clearButton" class="btn btn-warning btn-sm text-white ms-2" <%= participantCount === 0 ? 'disabled' : '' %>>
                        <i class="bi bi-trash"></i> Limpar Lista
                      </button>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="table-responsive">
                      <table class="table table-striped table-hover">
                        <thead>
                          <tr>
                            <th scope="col">#</th>
                            <th scope="col">Usuário</th>
                          </tr>
                        </thead>
                        <tbody id="participantsList">
                          <% if (participants.length === 0) { %>
                            <tr>
                              <td colspan="2" class="text-center">Nenhum participante registrado.</td>
                            </tr>
                          <% } else { %>
                            <% participants.forEach((username, index) => { %>
                              <tr>
                                <th scope="row"><%= index + 1 %></th>
                                <td><%= username %></td>
                              </tr>
                            <% }); %>
                          <% } %>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <% if (winners.length > 0) { %>
              <div class="row">
                <div class="col-md-12">
                  <div class="card winner-card">
                    <div class="card-header">
                      <h5 class="mb-0">Vencedores Anteriores</h5>
                    </div>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table">
                          <thead>
                            <tr>
                              <th scope="col">#</th>
                              <th scope="col">Usuário</th>
                            </tr>
                          </thead>
                          <tbody>
                            <% winners.forEach((winner, index) => { %>
                              <tr>
                                <th scope="row"><%= index + 1 %></th>
                                <td><%= winner %></td>
                              </tr>
                            <% }); %>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Container para notificações -->
  <div class="toast-container"></div>

  <!-- Winner Modal -->
  <div class="modal fade" id="winnerModal" tabindex="-1" aria-labelledby="winnerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-success text-white">
          <h5 class="modal-title" id="winnerModalLabel">Sorteio Concluído!</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center">
          <div class="py-4">
            <i class="bi bi-trophy text-warning" style="font-size: 4rem;"></i>
            <h3 class="mt-3">Parabéns ao vencedor:</h3>
            <h2 id="winnerName" class="text-success mt-2"></h2>
            <p class="text-muted mt-3">Total de participantes: <span id="winnerTotalParticipants"></span></p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const startButton = document.getElementById('startButton');
      const stopButton = document.getElementById('stopButton');
      const drawButton = document.getElementById('drawButton');
      const clearButton = document.getElementById('clearButton');
      const participantsList = document.getElementById('participantsList');
      const participantCount = document.getElementById('participantCount');
      const winnerModal = new bootstrap.Modal(document.getElementById('winnerModal'));
      const winnerName = document.getElementById('winnerName');
      const winnerTotalParticipants = document.getElementById('winnerTotalParticipants');

      // Função para mostrar notificações
      function showToast(message, type = 'success') {
        const toastContainer = document.querySelector('.toast-container');
        const toastEl = document.createElement('div');
        toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
        toastEl.setAttribute('role', 'alert');
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');
        
        toastEl.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        `;
        
        toastContainer.appendChild(toastEl);
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
        
        // Remove toast after it's hidden
        toastEl.addEventListener('hidden.bs.toast', function () {
          toastEl.remove();
        });
      }

      // Função para atualizar interface após mudanças de estado
      function updateUI(isActive, participants = null) {
        startButton.disabled = isActive;
        stopButton.disabled = !isActive;
        
        if (participants !== null) {
          const count = participants.length;
          participantCount.textContent = count;
          drawButton.disabled = count === 0;
          clearButton.disabled = count === 0;
          
          if (count === 0) {
            participantsList.innerHTML = `
              <tr>
                <td colspan="2" class="text-center">Nenhum participante registrado.</td>
              </tr>
            `;
          } else {
            participantsList.innerHTML = participants.map((username, index) => `
              <tr>
                <th scope="row">${index + 1}</th>
                <td>${username}</td>
              </tr>
            `).join('');
          }
        }
      }

      // Iniciar o Bot
      startButton.addEventListener('click', async function() {
        try {
          const response = await fetch('/api/bot/start', {
            method: 'POST',
          });
          const data = await response.json();
          
          if (data.success) {
            updateUI(true);
            showToast(data.message);
          } else {
            showToast(data.message, 'danger');
          }
        } catch (error) {
          showToast('Erro ao iniciar o bot: ' + error.message, 'danger');
        }
      });

      // Parar o Bot
      stopButton.addEventListener('click', async function() {
        try {
          const response = await fetch('/api/bot/stop', {
            method: 'POST',
          });
          const data = await response.json();
          
          updateUI(false);
          showToast(data.message);
        } catch (error) {
          showToast('Erro ao parar o bot: ' + error.message, 'danger');
        }
      });

      // Realizar sorteio
      drawButton.addEventListener('click', async function() {
        try {
          const response = await fetch('/api/bot/draw', {
            method: 'POST',
          });
          const data = await response.json();
          
          if (data.success) {
            winnerName.textContent = data.winner;
            winnerTotalParticipants.textContent = data.participantCount;
            winnerModal.show();
            
            // Atualiza a lista de participantes após o sorteio
            fetchParticipants();
          } else {
            showToast(data.message, 'warning');
          }
        } catch (error) {
          showToast('Erro ao realizar sorteio: ' + error.message, 'danger');
        }
      });

      // Limpar lista de participantes
      clearButton.addEventListener('click', async function() {
        if (!confirm('Tem certeza que deseja limpar a lista de participantes?')) {
          return;
        }
        
        try {
          const response = await fetch('/api/bot/clear', {
            method: 'POST',
          });
          const data = await response.json();
          
          showToast(data.message);
          fetchParticipants();
        } catch (error) {
          showToast('Erro ao limpar participantes: ' + error.message, 'danger');
        }
      });

      // Buscar participantes atualizados
      async function fetchParticipants() {
        try {
          const response = await fetch('/api/bot/participants');
          const data = await response.json();
          
          if (data.success) {
            updateUI(document.querySelector('.status-badge').classList.contains('bg-success'), data.participants);
          }
        } catch (error) {
          console.error('Erro ao buscar participantes:', error);
        }
      }

      // Atualiza a lista de participantes periodicamente (a cada 10 segundos)
      setInterval(fetchParticipants, 10000);
    });
  </script>
</body>
</html>